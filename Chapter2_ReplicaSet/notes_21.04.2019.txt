#####################################################

Binary Replication
    Uses binary log, memory address VS Data to be writtern
    Same OS and DB version, otherwise data could be corrupted

    Pros: less data, faster, 

Statement-Based Replication (MONGO DB USES IT)
    Uses Oplog, Database VS write Statement
    Works in any SO, multiple machines with different SOs

    Pros: Not bound by operating system, or any machine level dependency

https://www.restapitutorial.com/lessons/idempotency.html

Idempotence (Idempotência)

Idempotence is a funky word that often hooks people. Idempotence is sometimes a confusing concept, 
at least from the academic definition.

From a RESTful service standpoint, for an operation (or service call) to be idempotent, 
clients can make that same call repeatedly while producing the same result. In other words, 
making multiple identical requests has the same effect as making a single request. 
Note that while idempotent operations produce the same result on the server (no side effects), 
the response itself may not be the same (e.g. a resource's state may change between requests).

The PUT and DELETE methods are defined to be idempotent. However, there is a caveat on DELETE. 
The problem with DELETE, which if successful would normally return a 200 (OK) or 204 (No Content), 
will often return a 404 (Not Found) on subsequent calls, unless the service is configured to "mark" resources 
for deletion without actually deleting them. However, when the service actually deletes the resource, 
the next call will not find the resource to delete it and return a 404. However, 
the state on the server is the same after each DELETE call, but the response is different.

GET, HEAD, OPTIONS and TRACE methods are defined as safe, meaning they are only intended for retrieving data. 
This makes them idempotent as well since multiple, identical requests will behave the same.

#####################################################

REPLICA SETS

NODES TYPE
PRIMARY, all reads and all writes are performed here
SECONDARY, replicate all info in primary node and servers a high availability in case of failure of primary one

Every tyme a application writes data in Primary node its data is replicated to the secondary nodes. In the MongoDB
the protocol used is Asynchronous Replication 
    
    Protocol Version 1 (PV1) uses Raft Protocol
    http://thesecretlivesofdata.com/raft/
    https://raft.github.io/

ARBITER, is a node thats hold no data, can vote in a n election and cannot become primary

YOU MUST HAVE ODD (ímpar) NUMBER OF NODES

For instance we have 50 replicas, we could choose 7 members to be eligible member, with one of them being the primary node

I you not wanted to have so many primary replicas use ARBITERS instead of. BUT AVOID ARBITERS!!!

HIDDEN, provides specific read-only workloads, or have copies over your data which are hidden from the application.
hidden nodes can also be set with a delay in their process, its called delayed nodes. The purpose of having DELAYED nodes 
is to allow resilience to application level corruption, without relying on cold backup files to recover from such event. 
ITS ENABLING US TO HAVE HOT BACKUPS

Recap 
    Replica Sets are groups of mongod
    High Availability and Failover
    Members can have different roles and specific purposes

#####################################################


#####################################################


#####################################################


#####################################################






